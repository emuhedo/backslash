"""Add timespan to sessions and tests

Revision ID: 6ba5e3ab38a0
Revises: 3503ac7ee0de
Create Date: 2017-07-24 11:12:34.935190

"""

# revision identifiers, used by Alembic.
revision = '6ba5e3ab38a0'
down_revision = '3503ac7ee0de'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from flask_app import tasks

_NAME_TEMPLATE = 'populate {} timespans'

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('session', sa.Column('timespan', postgresql.TSTZRANGE(), nullable=True))
    op.create_index('ix_session_timespan', 'session', ['timespan'], unique=False, postgresql_using='gist')
    op.add_column('test', sa.Column('timespan', postgresql.TSTZRANGE(), nullable=True))
    op.create_index('ix_test_timespan', 'test', ['timespan'], unique=False, postgresql_using='gist')

    # sessions
    op.execute(f'''
    insert into background_migration(name, remaining_num_items_query, update_query)
    values (
    '{_NAME_TEMPLATE.format("session")}',
    'select count(*) from "session" where timespan IS NULL',
    'update "session" set timespan = tstzrange(to_timestamp(start_time), to_timestamp(CASE WHEN end_time IS NULL THEN next_keepalive ELSE end_time END), ''[]'') where id in (select id from "session" where timespan is NULL limit \\:batch_size)'
    )''')


    update_query = f'''
    UPDATE test
    SET timespan = TSTZRANGE(
        TO_TIMESTAMP(test.start_time),
        CASE WHEN test.end_time IS NOT NULL THEN
           TO_TIMESTAMP(test.end_time)
        ELSE GREATEST(
            UPPER("session".timespan),
            TO_TIMESTAMP(test.start_time))
        END, ''[]'')
    FROM "session"
    WHERE "session".id = test.session_id AND test.id IN (
      SELECT id FROM "test" WHERE timespan IS NULL LIMIT \\:batch_size
    )
    '''.strip()

    # tests
    op.execute(f'''
    insert into background_migration(name, remaining_num_items_query, update_query)
    values (
    '{_NAME_TEMPLATE.format("test")}',
    'select count(*) from "test" where timespan IS NULL',
    '{update_query}'
    )''')

    tasks.do_live_migrate.delay()


    # ### end Alembic commands ###


def downgrade():
    for objtype in ['session', 'test']:
        op.execute(f"delete from background_migration where name='{_NAME_TEMPLATE.format(objtype)}'")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_test_timespan', table_name='test')
    op.drop_column('test', 'timespan')
    op.drop_index('ix_session_timespan', table_name='session')
    op.drop_column('session', 'timespan')
    # ### end Alembic commands ###
